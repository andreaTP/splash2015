
package eu.unicredit.benchmarks

import scala.scalajs.js
import js.Dynamic.literal

import akka.actor._

object Main /*extends js.JSApp*/ {

	def main() = {
		println("hello benchmarks")

		val system = ActorSystem.create("benchmarks")

		VueActor.setSystem(system)

		class Ping() extends VueActor {

			val vueTemplate = "<h2>PIPPO{{message}}</h2>"

			def operational = 
			vueBehaviour orElse {
				case "ping" => 
					vue.$set("message", "PLUTO")
					println("ping")
					sender ! "pong"
			}
		}

		class Pong(ar: ActorRef) extends VueActor {

			val vueTemplate = "<button v-on='click:clickHandler'>CI - {{msg}} </button>"

			override val vueMethods = literal( 
				clickHandler =() => {
		  			println("received click ")
		  			self ! "pong"
		  		}
		  	)

			override def preStart = {
				ar ! "ping"
				super.preStart
			}

			var index = 1

			def operational = 
			vueBehaviour orElse {
				case "pong" =>
					vue.$set("msg", "ACTIVE "+index)
					index += 1
					vue.$log
					println("received pong")
			}
		}
		
		val va = () => new VueActor {
			val vueTemplate = "<div> <h1>YAY Vue YAY Akka.js</h1> </div>"

			def operational = 
			vueBehaviour orElse {
				self ! "doIt";
				{
				case "doIt" =>
					val ping = context.actorOf(Props(new Ping()), "ping")

					import context._
					import scala.concurrent.duration._
					context.system.scheduler.scheduleOnce(2 seconds)({
					ping ! "ping"
					val pong = context.actorOf(Props(new Pong(ping)), "pong")

					context.system.scheduler.scheduleOnce(2 seconds)({
					pong ! "pong"
					})
					})

					
				case any => 
					println("RECEIVED "+any)
			}}
		}

		VueActor.insert(va, "yay")
	}
}